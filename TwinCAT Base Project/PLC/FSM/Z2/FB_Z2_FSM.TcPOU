<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Z2_FSM" Id="{4d1d1580-08d8-0a42-246f-0278acc69dae}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Z2_FSM
VAR_INPUT
	bEnable		:	BOOL;
	bAck		:	BOOL;
	bStop		:	BOOL;
	bI1			:	BOOL;
	bI2			:	BOOL;
	bI5			:	BOOL;   // transizione da Ready a WaitZ3
	stParams	:	ST_Z2_Params;	
END_VAR
VAR_IN_OUT
	stStatus	:	ST_FSM_Status;	
END_VAR
VAR_OUTPUT
	// Digital Outputs
	bQ1			:	BOOL;
	bQ2			:	BOOL;	
	bErr		:	BOOL;
END_VAR
VAR
	// FSM internal variables
	bInitialized	:	BOOL;
	eNewstep		:	E_Z2_Step;
	bEntryact		:	BOOL;
	fbTonStep		:	TON;
	
	fbRtStop		:	R_TRIG;
	fbRtI1			:	R_TRIG;
	fbRtI2			:	R_TRIG;
	fbRtI5			:	R_TRIG;
	bStopRequest	:	BOOL;	
	tStepTime		:   ST_Z2_Status;
	tStopDelay		:   ST_Z2_Params;
	bConveyorLoaded :   BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInitialized THEN
	eNewstep :=  E_Z2_Step.NoStep;
	stStatus.stZ2.eStep :=  E_Z2_Step.Stop;
	bEntryact := FALSE;
	bInitialized := TRUE;	
	bErr := FALSE;
	stStatus.stZ2.eErrorStep :=  E_Z2_Step.NoStep;	
	stStatus.stZ2.nErrorId := 0;	
ELSE
	(* fronti *)
	fbRtStop(CLK:= bStop);	
	fbRtI1(CLK := bI1);
	fbRtI2(CLK := bI2);
	fbRtI5(CLK := bI5);
	(* richieste *)
	IF fbRtStop.Q THEN
		bStopRequest := TRUE;
	END_IF; 

	(* disabilitata o avaria *)
	
	IF NOT bEnable THEN
		eNewstep := E_Z2_Step.NeOrError;
	END_IF;
	
	(* aggiornamento dello stato *)
	IF eNewstep <>  E_Z2_Step.NoStep THEN
		stStatus.stZ2.eStep := eNewstep;
		eNewstep :=  E_Z2_Step.NoStep;
		bEntryact := FALSE;
	END_IF;	
	
	(* switch - case della MSF *)
	CASE stStatus.stZ2.eStep OF
	//Ne0rError	
	E_Z1_Step.NeOrError :
	// entry action
	IF NOT bEntryact THEN
	bErr := TRUE;
	bEntryact := TRUE;
	END_IF
	// body
	bQ1 := FALSE;
	bQ2 := FALSE;
	bErr := TRUE;
	// transition from Ne0rError to Recovering
	IF (bEnable AND bAck) THEN
		eNewStep := E_Z2_Step.Recovering;
	END_IF
	// exit action
	IF eNewStep <> E_Z2_Step.NoStep THEN
	stStatus.nErrorID := 2;
	stStatus.eErrorStep := E_Z2_Step.NoStep;
	END_IF	
	
    // Recovering		
    E_Z2_Step.Recovering :
	// entry action
	IF NOT bEntryact THEN
	bEntryact := TRUE;
	END_IF
	// body	
	bQ1 := NOT(bI2);
	bQ2 := FALSE;
	bErr := FALSE;
	// transition from Recovering to Stop
	IF (fbRtI2.Q) THEN
	eNewStep := E_Z2_Step.Stop;
	END_IF
	// on exit action
	IF eNewStep <> E_Z2_Step.NoStep THEN
	stStatus.bFailure := FALSE;
	END_IF				
	
    //Stop
    E_Z2_Step.Stop :
	// entry action
	 IF NOT bEntryact THEN
		stStatus.bFailure := TRUE;
	    bEntryact := TRUE;
	 END_IF;
	//body
    bQ1 :=  FALSE;
	bQ2 := FALSE;
	bErr := FALSE;
	//transition from Stop to Ready
	IF ((stStatus.tStepTime > stParams.tStopDelay) AND bStart) THEN
		eNewStep := E_Z2_Step.Ready; 
	END_IF;
	// exit action
	IF eNewStep <> E_Z2_Step.NoStep THEN
	stStatus.nErrorID := 0;
	stStatus.eErrorStep := E_Z2_Step.NoStep;
	END_IF;
			
	//Ready
	E_Z2_Step.Ready :
	// entry action
		IF NOT bEntryact THEN
		bEntryact := TRUE;
		END_IF;	
	// body
	bQ1 :=  FALSE;
	bQ2 := FALSE;
	bErr := FALSE;
	//transition from Ready to Recovering 
	IF (bStopRequest) THEN 
		eNewStep := E_Z2_Step.Recovering;
	END_IF; 	
	//transition from Ready to WaitZ3Ready 
	IF (NOT(bStopRequest) AND stStatus.stZ1.eStep = E_Z1_Step.DelayToZ2) THEN
		eNewStep := E_Z2_Step.WaitZ3Ready;		
	END_IF;
	// exit action 
	IF eNewStep <> E_Z2_Step.NoStep THEN
	stStatus.bFailure := FALSE;
	END_IF;	
	
	// WaitZ3Ready
	E_Z2_Step.WaitZ3Ready :
	// entry action
	IF NOT bEntryact THEN
	bStopRequest := FALSE;
	bConveyorLoaded := FALSE;
	bEntryact := TRUE;
	END_IF;
	// body
	bQ1 :=  FALSE;
	bQ2 := FALSE;
	bErr := FALSE;
	//transition from WaitZ3Ready to MoveForward
	IF (NOT(bStopRequest) AND stStatus.stZ3.eStep = E_Z3_Step.Ready) THEN
		eNewStep := E_Z2_Step.MoveForward;		
	END_IF;	
	// transition from WaitZ3Ready to Recovering
	IF (bStopRequest) THEN 
		eNewStep := E_Z2_Step.Recovering;
	END_IF; 	
	// exit action
	IF eNewStep <> E_Z2_Step.NoStep THEN ;
	END_IF;
			
	//MoveForward
    E_Z2_Step.MoveForward :
	// entry action
	IF NOT bEntryact THEN
	bStopRequest := FALSE;
	bConveyorLoaded := FALSE;
	bEntryact := TRUE;
	END_IF;
	//body
    bQ1 :=  FALSE;
	bQ2 := NOT(bI1);
	bErr := FALSE;
	//transition from MoveForward to MoveBackward
	IF (fbRtI1.Q) THEN
		eNewStep := E_Z2_Step.MoveBackward; 
	END_IF;
	// exit action
	IF eNewStep <> E_Z2_Step.NoStep THEN ;
	END_IF;
	
	//MoveBackward
    E_Z2_Step.MoveBackward :
	// entry action
	IF NOT bEntryact THEN
	bStopRequest := FALSE;
	bConveyorLoaded := FALSE;
	bEntryact := TRUE;
	END_IF;
	//body
    bQ1 :=  NOT(bI2);
	bQ2 := FALSE;
	bErr := FALSE;
	//transition from MoveBackward to Done
	IF (fbRtI2.Q) THEN
		eNewStep := E_Z2_Step.Done; 
	END_IF;
	// exit action
	IF eNewStep <> E_Z2_Step.NoStep THEN ;
	END_IF;
	
   //Done
    E_Z2_Step.Done :
	// entry action
    IF NOT bEntryact THEN
	bStopRequest := FALSE;
	bConveyorLoaded := FALSE;
	bEntryact := TRUE;
	END_IF;
	//body
    bQ1 :=  FALSE;
	bQ2 :=  FALSE;
	bErr := FALSE;
	//transition from MoveBackward to Done
		eNewStep := E_Z2_Step.Ready; 
	// exit action
		IF eNewStep <> E_Z2_Step.NoStep THEN;
			END_IF;
	ELSE
			eNewstep :=  E_Z2_Step.NeOrError;
			stStatus.stZ2.eErrorStep :=  E_Z2_Step.Unknown;			
			stStatus.stZ2.nErrorId := 16#0002_9999;
	END_CASE 
	
	(* call FBs *)
	
	(* tempo di permanenza nello step *)
	fbTonStep(IN := (eNewstep =  E_Z2_Step.NoStep), PT := T#500H);
	stStatus.stZ2.tStepTime := fbTonStep.ET;	
	END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>