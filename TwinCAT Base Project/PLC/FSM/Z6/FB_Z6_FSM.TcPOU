<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Z6_FSM" Id="{d93bc223-e386-0ccc-0756-92d817d9bf1d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Z6_FSM
VAR_INPUT
	bEnable		:	BOOL;
	bAck		:	BOOL;
	bStop		:	BOOL;
	bI9			:	BOOL;
	stParams	:	ST_Z6_Params;	
END_VAR
VAR_IN_OUT
	stStatus	:	ST_FSM_Status;	
END_VAR
VAR_OUTPUT
	// Digital Outputs
	bQ10		:	BOOL;
	bErr		:	BOOL;
END_VAR
VAR
	// FSM internal variables
	bInitialized	:	BOOL;
	eNewstep		:	E_Z6_Step;
	bEntryact		:	BOOL;
	fbTonStep		:	TON;
	
	fbRtStop		:	R_TRIG;
	fbRtI9			:	R_TRIG;
	bStopRequest	:	BOOL;	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInitialized THEN
	eNewstep :=  E_Z6_Step.NoStep;
	stStatus.stZ6.eStep :=  E_Z6_Step.NeOrError;
	bEntryact := FALSE;
	bInitialized := TRUE;	
	bErr := FALSE;
	stStatus.stZ6.eErrorStep :=  E_Z6_Step.NoStep;	
	stStatus.stZ6.nErrorId := 0;	
ELSE
	(* fronti *)
	fbRtStop(CLK:= bStop);	
	fbRtI9(CLK := bI9);
	
	(* richieste *)
	IF fbRtStop.Q THEN
		bStopRequest := TRUE;
	END_IF; 

	(* disabilitata o avaria *)
	IF NOT bEnable THEN
		eNewstep := E_Z6_Step.NeOrError;
	END_IF;
	
	(* aggiornamento dello stato *)
	IF eNewstep <>  E_Z6_Step.NoStep THEN
		stStatus.stZ6.eStep := eNewstep;
		eNewstep :=  E_Z6_Step.NoStep;
		bEntryact := FALSE;
	END_IF;	
	
	IF stStatus.bFailure THEN
		eNewstep := E_Z6_Step.NeOrError;
	END_IF
	
	(* switch - case della MSF *)
	CASE stStatus.stZ6.eStep OF

	// STOP ------------------------------------------
	E_Z6_Step.Stop	:
		//entry act
		IF NOT bEntryact THEN
			bErr := FALSE;
			bEntryact := TRUE;
		END_IF
		
		// Body
		bQ10 := FALSE;
		
		// transition from Stop to Ready
		IF(stStatus.stZ6.tStepTime > stParams.tStopDelay) THEN
			eNewStep := E_Z6_Step.Ready;
		END_IF
	
		// exit action
		IF eNewStep <> E_Z6_Step.NoStep THEN
			;
		END_IF		
		
	// READY ------------------------------------------
	E_Z6_Step.Ready:
		//entry act
		IF NOT bEntryact THEN
			bErr := FALSE;
			bEntryact := TRUE;
		END_IF
		
		// Body		
		bQ10 := FALSE;
		
		// transition from Ready to Loading / Stop
		IF bStopRequest THEN
			eNewStep := E_Z6_Step.Stop;
		ELSE
			IF (stStatus.stZ5.eStep = E_Z5_Step.WaitZ6Ready) THEN
				eNewStep := E_Z6_Step.Loading;
			END_IF
		END_IF		
	
		// exit action
		IF eNewStep <> E_Z6_Step.NoStep THEN
			;
		END_IF	
	
	// LOADING ------------------------------------------
	E_Z6_Step.Loading:
		//entry act
		IF NOT bEntryact THEN
			bErr := FALSE;
			bEntryact := TRUE;
		END_IF
		
		// Body	
		bQ10 := TRUE;
		
		// transition from Loading to Stop / WaitUnloading
		IF bStopRequest THEN
			eNewStep := E_Z6_Step.Stop;
		ELSE
			IF fbrtI9.Q THEN
				eNewStep := E_Z6_Step.WaitUnloading;
			END_IF
		END_IF
	
		// exit action
		IF eNewStep <> E_Z6_Step.NoStep THEN
			;
		END_IF	
	
	// WAIT_UNLOADING ------------------------------------------
	E_Z6_Step.WaitUnloading	:
		//entry act
		IF NOT bEntryact THEN
			bErr := FALSE;
			bEntryact := TRUE;
		END_IF
		
		// Body		
		bQ10	:=	FALSE;

		// transition from WaitUnloading to Done	
		IF NOT(bI9) THEN
			eNewStep := E_Z6_Step.Done;
		END_IF
	
		// exit action
		IF eNewStep <> E_Z6_Step.NoStep THEN
			;
		END_IF	
	
	// DONE	
	E_Z6_Step.Done	:
		//entry act
		IF NOT bEntryact THEN
			bErr := FALSE;
			bEntryact := TRUE;
		END_IF
		
		// Body		
		bQ10 := FALSE;

		// transition from Done to Ready	
		eNewStep := E_Z6_Step.Ready;
	
		// exit action
		IF eNewStep <> E_Z6_Step.NoStep THEN
			;
		END_IF	
	
	// NEORERROR ------------------------------------------
	E_Z6_Step.NeOrError:
		//entry act	
		IF NOT bEntryact THEN
			bErr := TRUE;
			bEntryact := TRUE;
		END_IF
		
		// Body		
		bQ10	:=	FALSE;

		// transition from NeOrError to Recovering	
		IF bEnable THEN
			IF bAck THEN
				eNewStep	:=	E_Z6_Step.Recovering;
			END_IF
		END_IF
	
		//exit act
		IF eNewStep <> E_Z6_Step.NoStep THEN
			stStatus.stZ6.nErrorId := 0;
			stStatus.stZ6.eErrorStep := E_Z6_Step.NoStep;
		END_IF	
	
	// RECOVERING ------------------------------------------
	E_Z6_Step.Recovering:
		//entry act	
		IF NOT bEntryact THEN
			bErr := FALSE;
			bEntryact := TRUE;
		END_IF
		
		// Body	
		bQ10	:=	FALSE;

		// transition from Recovering to Stop	
		IF bEnable THEN
			IF NOT(stStatus.bFailure) THEN
				eNewStep := E_Z6_Step.Stop;
			END_IF				
		END_IF
	
		// exit action
		IF eNewStep <> E_Z6_Step.NoStep THEN
			;
		END_IF
	
	ELSE
			eNewstep :=  E_Z6_Step.NeOrError;
			stStatus.stZ6.eErrorStep :=  E_Z6_Step.Unknown;			
			stStatus.stZ6.nErrorId := 16#0006_9999;	
	END_CASE
	
	(* call FBs *)
	
	(* tempo di permanenza nello step *)
	fbTonStep(IN := (eNewstep =  E_Z6_Step.NoStep), PT := T#500H);
	stStatus.stZ6.tStepTime := fbTonStep.ET;	
	
END_IF	]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>