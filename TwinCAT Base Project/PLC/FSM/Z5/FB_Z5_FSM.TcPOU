<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Z5_FSM" Id="{ea3432fb-ba63-04d6-11c2-9253fd25a5cb}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Z5_FSM
VAR_INPUT
	bEnable		:	BOOL;
	bAck		:	BOOL;
	bStop		:	BOOL;
	bI3			:	BOOL;
	bI4			:	BOOL;
	stParams	:	ST_Z5_Params;	
END_VAR
VAR_IN_OUT
	stStatus	:	ST_FSM_Status;	
END_VAR
VAR_OUTPUT
	// Digital Outputs
	bQ3			:	BOOL;
	bQ4			:	BOOL;	
	bErr		:	BOOL;
END_VAR
VAR
	// FSM internal variables
	bInitialized	:	BOOL;
	eNewstep		:	E_Z5_Step;
	bEntryact		:	BOOL;
	fbTonStep		:	TON;
	
	fbRtStop		:	R_TRIG;
	fbRtI3			:	R_TRIG;
	fbRtI4			:	R_TRIG;
	bStopRequest	:	BOOL;	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInitialized THEN
	eNewstep :=  E_Z5_Step.NoStep;
	stStatus.stZ5.eStep :=  E_Z5_Step.NeOrError;
	bEntryact := FALSE;
	bInitialized := TRUE;	
	bErr := FALSE;
	stStatus.stZ5.eErrorStep :=  E_Z5_Step.NoStep;	
	stStatus.stZ5.nErrorId := 0;	
ELSE
	(* fronti *)
	fbRtStop(CLK:= bStop);	
	fbRtI3(CLK := bI3);
	fbRtI4(CLK := bI4);
	
	(* richieste *)
	IF fbRtStop.Q THEN
		bStopRequest := TRUE;
	END_IF; 

	(* disabilitata o avaria *)
	IF NOT bEnable THEN
		eNewstep := E_Z5_Step.NeOrError;
	END_IF;
	
	(* aggiornamento dello stato *)
	IF eNewstep <>  E_Z5_Step.NoStep THEN
		stStatus.stZ5.eStep := eNewstep;
		eNewstep :=  E_Z5_Step.NoStep;
		bEntryact := FALSE;
	END_IF;	
	
	(* switch - case della MSF *)
	CASE stStatus.stZ5.eStep OF
	
	// NeOrError -----------------------------------------
	E_Z5_Step.NeOrError :
		// entry action
		IF NOT bEntryact THEN
			bErr := TRUE;
			bEntryact := TRUE;
		END_IF
		
		// body
		bQ3 := FALSE;
		bQ4 := FALSE;
		
		// transition from NeOrError to Recovering
		IF (bEnable AND bAck) THEN
			eNewStep := E_Z5_Step.Recovering;
		END_IF
		
		// exit action
		IF eNewStep <> E_Z5_Step.NoStep THEN
			stStatus.stZ5.nErrorID := 5;
			stStatus.stZ5.eErrorStep := E_Z5_Step.NoStep;
		END_IF	

	// Recovering -----------------------------------------
	E_Z5_Step.Recovering :
		// entry action
		IF NOT bEntryact THEN
			bErr := FALSE;
			bEntryact := TRUE;
		END_IF
		
		// body
		bQ3 := NOT(bI4);
		bQ4 := FALSE;
		
		// transition from Recovering to Stop
		IF fbRtI4.Q THEN
			eNewStep := E_Z5_Step.Stop;
		END_IF
		
		// exit action
		IF eNewStep <> E_Z5_Step.NoStep THEN
			;
		END_IF	

	// Stop -----------------------------------------
	E_Z5_Step.Stop :
		// entry action
		IF NOT bEntryact THEN
			bErr := FALSE;
			bEntryact := TRUE;
		END_IF
		
		// body
		bQ3 := FALSE;
		bQ4 := FALSE;
		
		// transition from Stop to Ready
		IF stStatus.stZ5.tStepTime > stParams.tStopDelay THEN
			eNewStep := E_Z5_Step.Ready;
		END_IF
		
		// exit action
		IF eNewStep <> E_Z5_Step.NoStep THEN
			;
		END_IF	

	// Ready -----------------------------------------
	E_Z5_Step.Ready :
		// entry action
		IF NOT bEntryact THEN
			bErr := FALSE;
			bEntryact := TRUE;
		END_IF
		
		// body
		bQ3 := FALSE;
		bQ4 := FALSE;
		
		// transition from Ready to Recovering / WaitZ6Ready
		IF bStopRequest THEN
			eNewStep := E_Z5_Step.Recovering;
		ELSE
			IF stStatus.stZ4.eStep = E_Z4_Step.WaitZ5Ready THEN
				eNewStep := E_Z5_Step.WaitZ6Ready;
			END_IF			
		END_IF

		// exit action
		IF eNewStep <> E_Z5_Step.NoStep THEN
			;
		END_IF	
		
	// WaitZ6Ready -----------------------------------------
	E_Z5_Step.WaitZ6Ready :
		// entry action
		IF NOT bEntryact THEN
			bErr := FALSE;
			bEntryact := TRUE;
		END_IF
		
		// body
		bQ3 := FALSE;
		bQ4 := FALSE;
		
		// transition from WaitZ6Ready to Recovering / MoveForward
		IF bStopRequest THEN
			eNewStep := E_Z5_Step.Recovering;
		ELSE
			IF stStatus.stZ6.eStep = E_Z6_Step.Ready THEN
				eNewStep := E_Z5_Step.MoveForward;
			END_IF			
		END_IF

		// exit action
		IF eNewStep <> E_Z5_Step.NoStep THEN
			;
		END_IF	
	
	// MoveForward -----------------------------------------
	E_Z5_Step.MoveForward :
		// entry action
		IF NOT bEntryact THEN
			bErr := FALSE;
			bEntryact := TRUE;
		END_IF
		
		// body
		bQ3 := FALSE;
		bQ4 := NOT(bI3);
		
		// transition from MoveForward to MoveBackward
		IF fbRtI3.Q THEN
			eNewStep := E_Z5_Step.MoveBackward;			
		END_IF

		// exit action
		IF eNewStep <> E_Z5_Step.NoStep THEN
			;
		END_IF
		
	// MoveBackward -----------------------------------------
	E_Z5_Step.MoveBackward :
		// entry action
		IF NOT bEntryact THEN
			bErr := FALSE;
			bEntryact := TRUE;
		END_IF
		
		// body
		bQ3 := NOT(bI4);
		bQ4 := FALSE;
		
		// transition from MoveBackward to Done
		IF fbRtI4.Q THEN
			eNewStep := E_Z5_Step.Done;			
		END_IF

		// exit action
		IF eNewStep <> E_Z5_Step.NoStep THEN
			;
		END_IF	

	// Done -----------------------------------------
	E_Z5_Step.Done:
		// entry action
		IF NOT bEntryact THEN
			bErr := FALSE;
			bEntryact := TRUE;
		END_IF
		
		// body
		bQ3 := FALSE;
		bQ4 := FALSE;
		
		// transition from Done to Ready
		eNewStep := E_Z5_Step.Ready;			

		// exit action
		IF eNewStep <> E_Z5_Step.NoStep THEN
			;
		END_IF		
		
	ELSE
			eNewstep :=  E_Z5_Step.NeOrError;
			stStatus.stZ5.eErrorStep :=  E_Z5_Step.Unknown;			
			stStatus.stZ5.nErrorId := 16#0005_9999;	
	END_CASE
	
	(* call FBs *)
	
	(* tempo di permanenza nello step *)
	fbTonStep(IN := (eNewstep =  E_Z5_Step.NoStep), PT := T#500H);
	stStatus.stZ5.tStepTime := fbTonStep.ET;	
	
END_IF	]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>