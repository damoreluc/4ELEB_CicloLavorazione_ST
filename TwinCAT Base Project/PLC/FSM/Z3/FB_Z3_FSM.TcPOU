<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Z3_FSM" Id="{c31aae44-2349-0766-0980-89d2bc93340f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Z3_FSM
VAR_INPUT
	bEnable		:	BOOL;
	bAck		:	BOOL;
	bStop		:	BOOL;
	bI6			:	BOOL;
	stParams	:	ST_Z3_Params;	
	stIn		: 	ST_FSM_In;
END_VAR
VAR_IN_OUT
	stStatus	:	ST_FSM_Status;
	stStep		:   E_Z3_Step;
	stZ2Step	:   E_Z2_Step;	
	stCmd		:	ST_FSM_Cmd;
	stCtrl		:	ST_FSM_Ctrl;
END_VAR
VAR_OUTPUT
	eStep		:	E_Z3_Step;
	tStepTime	:	TIME;
	eErrStep	:	E_Z3_Step;
	nErrId		:	DINT;
	// Digital Outputs
	bQ6			:	BOOL;
	bQ7			:	BOOL;	
	bErr		:	BOOL;
END_VAR
VAR
	// FSM internal variables
	bInitialized	:	BOOL;
	eNewstep		:	E_Z3_Step;
	bEntryact		:	BOOL;
	fbTonStep		:	TON;
	
	fbRtStop		:	R_TRIG;
	fbRtI6			:	R_TRIG;
	bStopRequest	:	BOOL;

	// object on conveyor
	bConveyorLoaded	:	BOOL;	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInitialized THEN
	eNewstep :=  E_Z3_Step.NoStep;
	stStatus.stZ3.eStep :=  E_Z3_Step.Stop;
	bEntryact := FALSE;
	bInitialized := TRUE;	
	bErr := FALSE;
	stStatus.stZ3.eErrorStep :=  E_Z3_Step.NoStep;	
	stStatus.stZ3.nErrorId := 0;	
ELSE
	(* fronti *)
	fbRtStop(CLK:= bStop);	
	fbRtI6(CLK := bI6);
	
	(* richieste *)
	IF fbRtStop.Q THEN
		bStopRequest := TRUE;
	END_IF; 

	(* disabilitata o avaria *)
	IF NOT bEnable THEN
		eNewstep := E_Z3_Step.NeOrError;
	END_IF;
	
	(* aggiornamento dello stato *)
	IF eNewstep <>  E_Z3_Step.NoStep THEN
		stStatus.stZ3.eStep := eNewstep;
		eNewstep :=  E_Z3_Step.NoStep;
		bEntryact := FALSE;
	END_IF;	
	
	(* switch - case della MSF *)
	CASE stStatus.stZ3.eStep OF
	// To be done...
	E_Z3_Step.NeOrError :
			// on entry action
			IF NOT bEntryact THEN
				stStatus.bFailure := TRUE;
				bEntryact := TRUE;
			END_IF
			
			// body
			bQ6 := FALSE;
			bQ7 := FALSE;
			bErr := TRUE;
					
			
			// next state transition
			IF stCtrl.bEnable THEN
				IF stCmd.bAck THEN
					eNewStep := E_Z3_Step.Recovering;
				END_IF
			END_IF
		
			// on exit action
			IF eNewStep <> E_Z3_Step.NoStep THEN
				nErrId := 0;
				eErrStep := E_Z3_Step.NoStep;
			END_IF
	
			// Recovering ---------------------------------			
		E_Z3_Step.Recovering :
			// on entry action
			IF NOT bEntryact THEN
				bEntryact := TRUE;
			END_IF
			
			// body	
			bQ6 := FALSE;
			bQ7 := FALSE;
			bErr := FALSE;
			
			// next state transition
			IF stCtrl.bEnable THEN
				IF NOT(stStatus.bFailure) THEN
					IF (tStepTime > stParams.tRecovering) THEN
						eNewStep := E_Z3_Step.Stop;
					END_IF
				END_IF				
			END_IF
			
			// on exit action
			IF eNewStep <> E_Z3_Step.NoStep THEN
				stStatus.bFailure := FALSE;
			END_IF			
			
		// Stop ---------------------------------------
		E_Z3_Step.Stop :
			// on entry action
			IF NOT bEntryact THEN
				bStopRequest := FALSE;
				bConveyorLoaded := FALSE;
				bEntryact := TRUE;
			END_IF
			
			// body	
			bQ6 := FALSE;
			bQ7 := FALSE;
			bErr:= FALSE;
			
			// next state transition
			IF NOT ST_FSM_Cmd.bStop AND ST_FSM_Cmd.bStart THEN
				IF (tStepTime > stParams.tRecovering) THEN
					eNewStep := E_Z3_Step.Ready;
				END_IF
			END_IF
			
			// on exit action
			IF eNewStep <> E_Z3_Step.NoStep THEN
				;
			END_IF
			
		// Ready ---------------------------------------
		E_Z3_Step.Ready :
			// on entry action
			IF NOT bEntryact THEN
				bStopRequest := FALSE;
				bConveyorLoaded := FALSE;
				bEntryact := TRUE;
			END_IF
			
			// body	
			bQ6 := FALSE;
			bQ7 := FALSE;
			bErr:= FALSE;
			
			// next state transition
			IF bStopRequest THEN 
				eNewStep := E_Z3_Step.Stop;
			ELSIF stStatus.stZ2.eStep=E_Z2_Step.WaitZ3Ready THEN
				eNewStep := E_Z3_Step.MoveToMill;
			END_IF
			
			// on exit action
			IF eNewStep <> E_Z3_Step.NoStep THEN
				;
			END_IF
			
			// MoveToMill ---------------------------------------
		E_Z3_Step.MoveToMill :
			// on entry action
			IF NOT bEntryact THEN
				bStopRequest := FALSE;
				bConveyorLoaded := FALSE;
				bEntryact := TRUE;
			END_IF
			
			// body	
			bQ6 := NOT(stIn.bI6);
			bQ7 := FALSE;
			bErr:= FALSE;
			
			// next state transition
			IF bStopRequest THEN 
				eNewStep := E_Z3_Step.Recovering;
			ELSIF stIn.bI6 THEN
				eNewStep := E_Z3_Step.MoveToMill;
			END_IF
			
			// on exit action
			IF eNewStep <> E_Z3_Step.NoStep THEN
				;
			END_IF
						

		// Milling ---------------------------------------
		E_Z3_Step.Milling :
			// on entry action
			IF NOT bEntryact THEN
				bStopRequest := FALSE;
				bConveyorLoaded := FALSE;
				bEntryact := TRUE;
			END_IF
			
			// body	
			bQ6 := FALSE;
			bQ7 := TRUE;
			bErr:= FALSE;
			
			// next state transition
			IF tStepTime > stParams.tMilling THEN 
				eNewStep := E_Z3_Step.WaitZ4Ready;
			END_IF
			
			// on exit action
			IF eNewStep <> E_Z3_Step.NoStep THEN
				;
			END_IF
			
		// WaitZ4Ready ---------------------------------------
		E_Z3_Step.WaitZ4Ready :
			// on entry action
			IF NOT bEntryact THEN
				bStopRequest := FALSE;
				bConveyorLoaded := FALSE;
				bEntryact := TRUE;
			END_IF
			
			// body	
			bQ6 := FALSE;
			bQ7 := FALSE;
			bErr:= FALSE;
			
			// next state transition
			IF stStatus.stZ3.eStep=E_Z3_Step.WaitZ4Ready THEN 
				eNewStep := E_Z3_Step.MoveToZ4;
			END_IF
			
			// on exit action
			IF eNewStep <> E_Z3_Step.NoStep THEN
				;
			END_IF
			
		// MoveToZ4 ---------------------------------------
		E_Z3_Step.MoveToZ4 :
			// on entry action
			IF NOT bEntryact THEN
				bStopRequest := FALSE;
				bConveyorLoaded := FALSE;
				bEntryact := TRUE;
			END_IF
			
			// body	
			bQ6 := FALSE;
			bQ7 := TRUE;
			bErr:= FALSE;
			
			// next state transition
			IF tStepTime > stParams.tDelayToZ4 THEN 
				eNewStep := E_Z3_Step.Done;
			END_IF
			
			// on exit action
			IF eNewStep <> E_Z3_Step.NoStep THEN
				;
			END_IF
			
		// Done ---------------------------------------
		E_Z3_Step.Done :
			// on entry action
			IF NOT bEntryact THEN
				bStopRequest := FALSE;
				bConveyorLoaded := FALSE;
				bEntryact := TRUE;
			END_IF
			
			// body	
			bQ6 := FALSE;
			bQ7 := FALSE;
			bErr:= FALSE;
			
			// next state transition
				
			eNewStep := E_Z3_Step.Ready;
			
			
			// on exit action
			IF eNewStep <> E_Z3_Step.NoStep THEN
				;
			END_IF
			
	ELSE
			eNewstep :=  E_Z3_Step.NeOrError;
			stStatus.stZ3.eErrorStep :=  E_Z3_Step.Unknown;			
			stStatus.stZ3.nErrorId := 16#0003_9999;	
	END_CASE
	
	(* call FBs *)
	
	(* tempo di permanenza nello step *)
	fbTonStep(IN := (eNewstep =  E_Z3_Step.NoStep), PT := T#500H);
	stStatus.stZ3.tStepTime := fbTonStep.ET;	
	
END_IF	]]></ST>
    </Implementation>
    <LineIds Name="FB_Z3_FSM">
      <LineId Id="3" Count="32" />
      <LineId Id="79" Count="7" />
      <LineId Id="93" Count="15" />
      <LineId Id="78" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="121" Count="7" />
      <LineId Id="135" Count="2" />
      <LineId Id="139" Count="13" />
      <LineId Id="183" Count="10" />
      <LineId Id="260" Count="1" />
      <LineId Id="204" Count="5" />
      <LineId Id="212" Count="5" />
      <LineId Id="120" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="264" Count="15" />
      <LineId Id="289" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="283" Count="4" />
      <LineId Id="263" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="296" Count="23" />
      <LineId Id="295" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="322" Count="15" />
      <LineId Id="340" Count="4" />
      <LineId Id="320" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="349" Count="16" />
      <LineId Id="368" Count="4" />
      <LineId Id="348" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="374" Count="21" />
      <LineId Id="373" Count="0" />
      <LineId Id="396" Count="0" />
      <LineId Id="399" Count="14" />
      <LineId Id="415" Count="0" />
      <LineId Id="421" Count="0" />
      <LineId Id="416" Count="4" />
      <LineId Id="397" Count="1" />
      <LineId Id="38" Count="11" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>