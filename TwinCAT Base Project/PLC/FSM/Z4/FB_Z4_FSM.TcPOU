<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Z4_FSM" Id="{2b070082-e5b2-0fae-1556-2f7884aa72a4}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Z4_FSM
VAR_INPUT
	bEnable		:	BOOL;
	bAck		:	BOOL;
	bStop		:	BOOL;
	bI8			:	BOOL;
	stParams	:	ST_Z4_Params;	
END_VAR
VAR_IN_OUT
	stStatus	:	ST_FSM_Status;	
END_VAR
VAR_OUTPUT
	// Digital Outputs
	bQ8			:	BOOL;
	bQ9			:	BOOL;	
	bErr		:	BOOL;
END_VAR
VAR
	// FSM internal variables
	bInitialized	:	BOOL;
	eNewstep		:	E_Z4_Step;
	bEntryact		:	BOOL;
	fbTonStep		:	TON;
	
	fbRtStop		:	R_TRIG;
	fbRtI8			:	R_TRIG;
	bStopRequest	:	BOOL;	
	bConveyorLoaded :   BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInitialized THEN
	eNewstep :=  E_Z4_Step.NoStep;
	stStatus.stZ4.eStep :=  E_Z4_Step.NeOrError;
	bEntryact := FALSE;
	bInitialized := TRUE;	
	bErr := FALSE;
	stStatus.stZ4.eErrorStep :=  E_Z4_Step.NoStep;	
	stStatus.stZ4.nErrorId := 0;	
ELSE
	(* fronti *)
	fbRtStop(CLK:= bStop);	
	fbRtI8(CLK := bI8);
	
	(* richieste *)
	IF fbRtStop.Q THEN
		bStopRequest := TRUE;
	END_IF; 

	(* disabilitata o avaria *)
	IF NOT bEnable THEN
		eNewstep := E_Z4_Step.NeOrError;
	END_IF;
	
	(* aggiornamento dello stato *)
	IF eNewstep <>  E_Z4_Step.NoStep THEN
		stStatus.stZ4.eStep := eNewstep;
		eNewstep :=  E_Z4_Step.NoStep;
		bEntryact := FALSE;
	END_IF
	
	(* Guasto e Rispristino *)
	IF stStatus.bFailure THEN
		eNewStep :=	E_Z4_Step.NeOrError;
	END_IF

	(* switch - case della MSF *)
	CASE stStatus.stZ4.eStep OF
		
	// NeOrError ---------------------------------			
	E_Z4_Step.NeOrError :
		// on entry action
		IF NOT bEntryact THEN
			bErr := TRUE;
			bEntryact := TRUE;
		END_IF
		
		// body
		bQ8 := FALSE;
		bQ9 := FALSE;			
			
		// next state transition
		IF bEnable THEN
			IF bAck THEN
				eNewStep := E_Z4_Step.Recovering;
			END_IF
		END_IF
		
		// on exit action
		IF eNewStep <> E_Z4_Step.NoStep THEN
			stStatus.stZ4.nErrorId := 4;
			stStatus.stZ4.eErrorStep := E_Z4_Step.NoStep;
		END_IF
	
	// Recovering ---------------------------------			
	E_Z4_Step.Recovering :
		// on entry action
		IF NOT bEntryact THEN
			bErr := FALSE;			
			bEntryact := TRUE;
		END_IF
			
		// body	
		bQ8 := FALSE;
		bQ9 := FALSE;
		
		// next state transition
		IF bEnable THEN
			eNewStep := E_Z4_Step.Stop;			
		END_IF
		
		// on exit action
		IF eNewStep <> E_Z4_Step.NoStep THEN
			;
		END_IF			
			
	// Stop ---------------------------------------
	E_Z4_Step.Stop :
		// on entry action
		IF NOT bEntryact THEN
			bStopRequest := FALSE;
			bErr:= FALSE;				
			bEntryact := TRUE;
		END_IF
			
		// body	
		bQ8 := FALSE;
		bQ9 := FALSE;
			
		// next state transition
		IF (stStatus.stZ4.tStepTime > stParams.tStopDelay) THEN
			eNewStep := E_Z4_Step.Ready;
		END_IF

		// on exit action
		IF eNewStep <> E_Z4_Step.NoStep THEN
			;
		END_IF
			
	// Ready ---------------------------------------
	E_Z4_Step.Ready :
		// on entry action
		IF NOT bEntryact THEN
			bErr:= FALSE;
			bEntryact := TRUE;
		END_IF
			
		// body	
		bQ8 := FALSE;
		bQ9 := FALSE;
						
		// next state transition
		IF bStopRequest THEN 
			eNewStep := E_Z4_Step.Recovering;
		ELSIF stStatus.stZ3.eStep = E_Z3_Step.WaitZ4Ready THEN
			eNewStep := E_Z4_Step.MoveToDrill;
		END_IF
		
		// on exit action
		IF eNewStep <> E_Z4_Step.NoStep THEN
			;
		END_IF
			
	// MoveToDrill ---------------------------------------
	E_Z4_Step.MoveToDrill :
		// on entry action
		IF NOT bEntryact THEN
			bErr:= FALSE;
			bEntryact := TRUE;
		END_IF
			
		// body	
		bQ8 := NOT(bI8);
		bQ9 := FALSE;
			
		// next state transition
		IF bStopRequest THEN 
			eNewStep := E_Z4_Step.Recovering;
		ELSIF fbRtI8.Q THEN
			eNewStep := E_Z4_Step.Drilling;
		END_IF
			
		// on exit action
		IF eNewStep <> E_Z4_Step.NoStep THEN
			;
		END_IF
						
	// Drilling ---------------------------------------
	E_Z4_Step.Drilling :
		// on entry action
		IF NOT bEntryact THEN
			bErr:= FALSE;
			bEntryact := TRUE;
		END_IF
			
		// body	
		bQ8 := FALSE;
		bQ9 := TRUE;
			
		// next state transition
		IF stStatus.stZ4.tStepTime > stParams.tDrilling THEN 
			eNewStep := E_Z4_Step.WaitZ5Ready;
		END_IF
			
		// on exit action
		IF eNewStep <> E_Z4_Step.NoStep THEN
			;
		END_IF
			
	// WaitZ5Ready ---------------------------------------
	E_Z4_Step.WaitZ5Ready :
		// on entry action
		IF NOT bEntryact THEN
			bErr:= FALSE;
			bEntryact := TRUE;
		END_IF
			
		// body	
		bQ8 := FALSE;
		bQ9 := FALSE;

		// next state transition
		IF stStatus.stZ5.eStep=E_Z5_Step.Ready THEN 
			eNewStep := E_Z4_Step.MoveToZ5;
		END_IF
			
		// on exit action
		IF eNewStep <> E_Z4_Step.NoStep THEN
			;
		END_IF
			
	// MoveToZ5 ---------------------------------------
	E_Z4_Step.MoveToZ5 :
		// on entry action
		IF NOT bEntryact THEN
			bErr:= FALSE;
			bEntryact := TRUE;
		END_IF
		
		// body	
		bQ8 := TRUE;
		bQ9 := FALSE;

		// next state transition
		IF stStatus.stZ4.tStepTime > stParams.tDelayToZ5 THEN 
			eNewStep := E_Z4_Step.Done;
		END_IF
		
		// on exit action
		IF eNewStep <> E_Z4_Step.NoStep THEN
			;
		END_IF
			
	// Done ---------------------------------------
	E_Z4_Step.Done :
		// on entry action
		IF NOT bEntryact THEN
			bErr:= FALSE;
			bEntryact := TRUE;
		END_IF
			
		// body	
		bQ8 := FALSE;
		bQ9 := FALSE;
	
		// next state transition	
		eNewStep := E_Z4_Step.Ready;
		
		// on exit action
		IF eNewStep <> E_Z4_Step.NoStep THEN
			;
		END_IF

	ELSE
			eNewstep :=  E_Z4_Step.NeOrError;
			stStatus.stZ4.eErrorStep :=  E_Z4_Step.Unknown;			
			stStatus.stZ4.nErrorId := 16#0004_9999;	
	END_CASE
	
	(* call FBs *)
	
	(* tempo di permanenza nello step *)
	fbTonStep(IN := (eNewstep =  E_Z4_Step.NoStep), PT := T#500H);
	stStatus.stZ4.tStepTime := fbTonStep.ET;	
	
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>