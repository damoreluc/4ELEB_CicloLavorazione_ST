<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Z1_FSM" Id="{2d6237a0-1c69-0396-17ba-4fbe4aa4993f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Z1_FSM
VAR_INPUT
	bEnable		:	BOOL;
	bAck		:	BOOL;
	bStart		:	BOOL;
	bStop		:	BOOL;
	bI5			:	BOOL;
	bI7			:	BOOL;
	stParams	:	ST_Z1_Params;	
END_VAR
VAR_IN_OUT
	stStatus	:	ST_FSM_Status;	
END_VAR
VAR_OUTPUT
	// Digital Outputs
	bQ5			:	BOOL;	
	bErr		:	BOOL;
END_VAR
VAR
	// FSM internal variables
	bInitialized	:	BOOL;
	eNewstep		:	E_Z1_Step;
	bEntryact		:	BOOL;
	fbTonStep		:	TON;
	
	fbRtStart		:	R_TRIG;
	fbRtStop		:	R_TRIG;
	fbRtI5			:	R_TRIG;
	fbRtI7			:	R_TRIG;
	bStopRequest	:	BOOL;


END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInitialized THEN
	eNewstep :=  E_Z1_Step.NoStep;
	stStatus.stZ1.eStep :=  E_Z1_Step.NeOrError;
	bEntryact := FALSE;
	bInitialized := TRUE;	
	bErr := FALSE;
	stStatus.stZ1.eErrorStep :=  E_Z1_Step.NoStep;	
	stStatus.stZ1.nErrorId := 0;	
ELSE
	(* fronti *)
	fbRtStart(CLK:= bStart);
	fbRtStop(CLK:= bStop);	
	fbRtI5(CLK := bI5);
	fbRtI7(CLK := bI7);
	
	(* richieste *)
	IF fbRtStop.Q THEN
		bStopRequest := TRUE;
	END_IF; 

	(* disabilitata o avaria *)
	IF NOT bEnable THEN
		eNewstep := E_Z1_Step.NeOrError;
	END_IF;
	
	(* aggiornamento dello stato *)
	IF eNewstep <>  E_Z1_Step.NoStep THEN
		stStatus.stZ1.eStep := eNewstep;
		eNewstep :=  E_Z1_Step.NoStep;
		bEntryact := FALSE;
	END_IF;	
	
	(* switch - case della MSF *)
	CASE stStatus.stZ1.eStep OF
		
	// NeOrError ---------------------------------
	E_Z1_Step.NeOrError :
		// on entry action
		IF NOT bEntryact THEN
			bErr := TRUE;
			bEntryact := TRUE;
		END_IF
		
		// body
		bQ5 := FALSE;				
		
		// next state transition
		IF bEnable THEN
			IF bAck THEN
				eNewStep := E_Z1_Step.Recovering;
			END_IF
		END_IF
	
		// on exit action
		IF eNewStep <> E_Z1_Step.NoStep THEN
			stStatus.stZ1.nErrorId := 1;
			stStatus.stZ1.eErrorStep := E_Z1_Step.NoStep;
		END_IF
		
	// Stop ---------------------------------	
	E_Z1_Step.Stop :
		// on entry action
		IF NOT bEntryact THEN
			bErr := FALSE;
			bEntryact := TRUE;
		END_IF
		
		// body
		bQ5 := FALSE;
		
		// next state transition
		IF (stStatus.tStepTime > stParams.tStopDelay AND fbRtStart.Q) THEN
			eNewStep := E_Z1_Step.Ready;
		END_IF
		
		// on exit action
		IF eNewStep <> E_Z1_Step.NoStep THEN
			;
		END_IF
		
	// Ready ---------------------------------	
	E_Z1_Step.Ready:
		// on entry action
		IF NOT bEntryact THEN
			bErr := FALSE;
			bEntryact := TRUE;
		END_IF
		
		// body	
		bQ5 := FALSE;
	
		// next state transition
		IF bStopRequest THEN
			eNewStep := E_Z1_Step.Stop;
		ELSE
			IF fbRtI7.Q THEN
				eNewStep := E_Z1_Step.DelayToFeeding;
			END_IF
		END_IF

		// on exit action
		IF eNewStep <> E_Z1_Step.NoStep THEN
			;
		END_IF
		
	// DelayToFeeding ---------------------------------	
	E_Z1_Step.DelayToFeeding:
		// on entry action
		IF NOT bEntryact THEN
			bErr := FALSE;
			bEntryact := TRUE;
		END_IF
		
		// body	
		bQ5 := FALSE;

		// next state transition
		IF bStopRequest THEN
			eNewStep := E_Z1_Step.Stop;
		ELSIF (stStatus.stZ1.tStepTime > stParams.tWaiting AND stStatus.stZ2.eStep=E_Z2_Step.Ready) THEN
			eNewStep := E_Z1_Step.Loading;
		END_IF

		// on exit action
		IF eNewStep <> E_Z1_Step.NoStep THEN
			;
		END_IF

	// Loading ---------------------------------	
	E_Z1_Step.Loading:
		// on entry action
		IF NOT bEntryact THEN
			bErr := FALSE;
			bEntryact := TRUE;
		END_IF
		
		// body		
		bQ5 := TRUE;

		// next state transition	
		IF (stStatus.stZ1.tStepTime < stParams.tTravelTime AND fbRtI5.Q) THEN
			eNewStep := E_Z1_Step.DelayToZ2;
		ELSIF (stStatus.stZ1.tStepTime > stParams.tTravelTime) THEN
			eNewStep := E_Z1_Step.NeOrError;
		END_IF

		// on exit action
		IF eNewStep <> E_Z1_Step.NoStep THEN
			;
		END_IF

	// DelayToZ2 ---------------------------------	
	E_Z1_Step.DelayToZ2:
		// on entry action
		IF NOT bEntryact THEN
			bErr := FALSE;
			bEntryact := TRUE;
		END_IF
		
		// body	
		bQ5 := TRUE;

		// next state transition
		IF stStatus.stZ1.tStepTime >= stParams.tTravelTime THEN
			IF NOT(bI5) THEN
				eNewStep := E_Z1_Step.Done;
			ELSE 
				eNewStep := E_Z1_Step.NeOrError;
			END_IF
		END_IF

		// on exit action
		IF eNewStep <> E_Z1_Step.NoStep THEN
			;
		END_IF

	// Done ---------------------------------		
	E_Z1_Step.Done:
		// on entry action
		IF NOT bEntryact THEN
			bErr := FALSE;
			bEntryact := TRUE;
		END_IF
		
		// body		
		bQ5 := FALSE;
		
		// next state transition
		eNewStep := E_Z1_Step.Ready;

		// on exit action
		IF eNewStep <> E_Z1_Step.NoStep THEN
			;
		END_IF

	// Recovering ---------------------------------	
	E_Z1_Step.Recovering:
		// on entry action
		IF NOT bEntryact THEN
			bErr := FALSE;
			bEntryact := TRUE;
		END_IF
		
		// body	
		bQ5 := FALSE;

		// next state transition	
		eNewStep := E_Z1_Step.Stop;

		// on exit action
		IF eNewStep <> E_Z1_Step.NoStep THEN
			;
		END_IF		

	ELSE
			eNewstep :=  E_Z1_Step.NeOrError;
			stStatus.stZ1.eErrorStep :=  E_Z1_Step.Unknown;			
			stStatus.stZ1.nErrorId := 16#0001_9999;	
	END_CASE
	
	(* call FBs *)
	
	(* tempo di permanenza nello step *)
	fbTonStep(IN := (eNewstep =  E_Z1_Step.NoStep), PT := T#500H);
	stStatus.stZ1.tStepTime := fbTonStep.ET;	
	
END_IF	]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>