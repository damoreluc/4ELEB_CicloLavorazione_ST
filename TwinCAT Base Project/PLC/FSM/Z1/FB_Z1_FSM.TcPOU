<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Z1_FSM" Id="{2d6237a0-1c69-0396-17ba-4fbe4aa4993f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Z1_FSM
VAR_INPUT
	bEnable		:	BOOL;
	bAck		:	BOOL;
	bStart		:	BOOL;
	bStop		:	BOOL;
	bI5			:	BOOL;
	bI7			:	BOOL;
	stParams	:	ST_Z1_Params;	
END_VAR
VAR_IN_OUT
	stStatus	:	ST_FSM_Status;	
END_VAR
VAR_OUTPUT
	// Digital Outputs
	bQ5			:	BOOL;	
	bErr		:	BOOL;
END_VAR
VAR
	// FSM internal variables
	bInitialized	:	BOOL;
	eNewstep		:	E_Z1_Step;
	bEntryact		:	BOOL;
	fbTonStep		:	TON;
	tStepTime		:	TON;
	tStopDelay		:	TON;
	tWaiting 		:	TON;
	tTravelTime		:	TON;
	
	fbRtStart		:	R_TRIG;
	fbRtStop		:	R_TRIG;
	fbRtI5			:	R_TRIG;
	fbRtI7			:	R_TRIG;
	bStopRequest	:	BOOL;	
	stZ1: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInitialized THEN
	eNewstep :=  E_Z1_Step.NoStep;
	stStatus.stZ1.eStep :=  E_Z1_Step.Stop;
	bEntryact := FALSE;
	bInitialized := TRUE;	
	bErr := FALSE;
	stStatus.stZ1.eErrorStep :=  E_Z1_Step.NoStep;	
	stStatus.stZ1.nErrorId := 0;	
ELSE
	(* fronti *)
	fbRtStart(CLK:= bStart);
	fbRtStop(CLK:= bStop);	
	fbRtI5(CLK := bI5);
	fbRtI7(CLK := bI7);
	
	(* richieste *)
	IF fbRtStop.Q THEN
		bStopRequest := TRUE;
	END_IF; 

	(* disabilitata o avaria *)
	IF NOT bEnable THEN
		eNewstep := E_Z1_Step.NeOrError;
	END_IF;
	
	(* aggiornamento dello stato *)
	IF eNewstep <>  E_Z1_Step.NoStep THEN
		stStatus.stZ1.eStep := eNewstep;
		eNewstep :=  E_Z1_Step.NoStep;
		bEntryact := FALSE;
	END_IF;	
	
	(* switch - case della MSF *)
	CASE stStatus.stZ1.eStep OF
	// To be done...	
	E_Z1_Step.Stop :
	
	bQ5 := FALSE;
	bErr := FALSE;
	
	IF (stStatus.tStepTime > stParams.tStopDelay AND bStart) THEN
		eNewStep := E_Z1_Step.Ready;
	END_IF
	
	E_Z1_Step.Ready:
	bQ5 := FALSE;
	bErr := FALSE;
	
	IF (NOT(bStopRequest) AND fbRtI7.Q) THEN
		eNewStep := E_Z1_Step.DelayToFeeding;
	ELSIF bStopRequest THEN
		eNewStep := E_Z1_Step.Stop;
	END_IF
	
	E_Z1_Step.DelayToFeeding:
	bQ5 := FALSE;
	bErr := FALSE;
	
	IF (stStatus.stZ1.tStepTime > stParams.tWaiting AND stStatus.stZ2.eStep=E_Z2_Step.Ready) THEN
		eNewStep := E_Z1_Step.Loading;
	ELSIF (bStopRequest) THEN
		eNewStep := E_Z1_Step.Stop;
	END_IF
	
	E_Z1_Step.Loading:
	
	bQ5 := TRUE;
	bErr := FALSE;
	
	IF (stStatus.stZ1.tStepTime < stParams.tTravelTime AND fbRtI5.Q) THEN
		eNewStep := E_Z1_Step.DelayToZ2;
	ELSIF (stStatus.stZ1.tStepTime > stParams.tTravelTime) THEN
		eNewStep := E_Z1_Step.NeOrError;
	END_IF
	
	E_Z1_Step.DelayToZ2:
	
	bQ5 := TRUE;
	bErr := FALSE;
	
	IF (stStatus.stZ1.tStepTime >= stParams.tTravelTime AND NOT(fbRtI5.Q)) THEN
		eNewStep := E_Z1_Step.Done;
	ELSIF (stStatus.stZ1.tStepTime >= stParams.tTravelTime AND fbRtI5.Q) THEN
		eNewStep := E_Z1_Step.NeOrError;
	END_IF
	
	E_Z1_Step.Done:
	
	bQ5 := FALSE;
	bErr := FALSE;
	
	eNewStep := E_Z1_Step.Ready;
	
	E_Z1_Step.NeOrError:
	
	bQ5 := FALSE;
	bErr := TRUE;
	
	IF (bAck) THEN
		eNewStep := E_Z1_Step.Recovering;
	END_IF
	
	E_Z1_Step.Recovering:
	
	bQ5 := FALSE;
	bErr := FALSE;
	
	eNewStep := E_Z1_Step.Stop;

	ELSE
			eNewstep :=  E_Z1_Step.NeOrError;
			stStatus.stZ1.eErrorStep :=  E_Z1_Step.Unknown;			
			stStatus.stZ1.nErrorId := 16#0001_9999;	
	END_CASE
	
	(* call FBs *)
	
	(* tempo di permanenza nello step *)
	fbTonStep(IN := (eNewstep =  E_Z1_Step.NoStep), PT := T#500H);
	stStatus.stZ1.tStepTime := fbTonStep.ET;	
	
END_IF	]]></ST>
    </Implementation>
    <LineIds Name="FB_Z1_FSM">
      <LineId Id="3" Count="35" />
      <LineId Id="84" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="83" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="126" Count="1" />
      <LineId Id="124" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="154" Count="1" />
      <LineId Id="131" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="132" Count="4" />
      <LineId Id="138" Count="0" />
      <LineId Id="156" Count="1" />
      <LineId Id="139" Count="4" />
      <LineId Id="145" Count="2" />
      <LineId Id="149" Count="0" />
      <LineId Id="151" Count="2" />
      <LineId Id="150" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="159" Count="5" />
      <LineId Id="158" Count="0" />
      <LineId Id="165" Count="3" />
      <LineId Id="170" Count="4" />
      <LineId Id="176" Count="8" />
      <LineId Id="169" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="187" Count="1" />
      <LineId Id="190" Count="2" />
      <LineId Id="186" Count="0" />
      <LineId Id="40" Count="11" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>